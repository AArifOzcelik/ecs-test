name: CI for EaaS Backend OCPP Application

on:
  push:
    branches:
      - master
      - dev
    paths-ignore:
      - ".github/**"

permissions:
  id-token: write
  contents: read

jobs:
  get-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.current_environment.outputs.ENVIRONMENT }}

    steps:
    - uses: actions/checkout@v4

    - name: Get Environment by Branch
      id: current_environment
      run: |
        ENVIRONMENT=${GITHUB_REF##*/}
        if [[ "$ENVIRONMENT" == "master" ]]; then
          ENVIRONMENT="prod"
        fi
        echo ENVIRONMENT=$ENVIRONMENT >> $GITHUB_OUTPUT

  build:
    needs: get-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.get-environment.outputs.environment }}
    env: 
      ENVIRONMENT: ${{ needs.get-environment.outputs.environment }}
    outputs:
      uri: ${{ steps.image_tag.outputs.URI }}
    strategy:
      matrix:
        include:
            - dockerfile : ./Dockerfile
              tag: "${{ needs.get-environment.outputs.environment }}-app"

    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-session-name: eaas-backend-ocpp-app

    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Generate Image Tag by SHA
      id: image_tag
      run: |
        TAG="${GITHUB_SHA::7}"
        echo TAG=$TAG >> $GITHUB_OUTPUT
        URI=${{ secrets.ECR_REPOSITORY_URL }}:${{ matrix.tag }}-${{ steps.image_tag.outputs.TAG }}
        echo URI=$URI >> $GITHUB_OUTPUT

    - name: Build and Push to ECR
      run: |
        docker buildx build \
          --file ${{ matrix.dockerfile }} \
          --tag ${{ steps.image_tag.outputs.URI }} \
          --no-cache \
          --push .
  
  update-ecs:
    needs: [get-environment, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.get-environment.outputs.environment }}
    env: 
      ENVIRONMENT: ${{ needs.get-environment.outputs.environment }}
      URI: ${{ needs.build.outputs.uri }}
    
    steps: 
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.URI }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true